The variable theta(how many radians to rotate the object about the given axis) should be populated by arccos(rn.uniform(-1,1)) instead of just rn.uniform(0,pi).

Justification:
Instead of thinking of the space of all rotational quaternions as continuous, think of it as represented a set of discrete states. e.g. quaternion q = [1,0,0,0] is considered the same as p [0.99, 0.081445,0.081445,0.081445]

in otherwords, "snap" nearby quaternions together to nodal points.
nearby-ness to another quaternion is calculated by the misorientation formula.

def misorientation2(p,q):	#Linear scale of misorientation
	differenceRotation = multiply( p,inverse(q) )	
	differenceRotation = np.clip(differenceRotation, -1,1)
	theta = arccos((differenceRotation[0]**2-0.5)*2)
	return theta
which is arccos(product of w minus dot product of axes).

*(by definition 0<=theta<=pi; so product of w >=0.)

From this we can see that a larger product of w gives more number of states.

Thus, when generating truely random quaternion, for a larger w, we must generate a higher density of states.
